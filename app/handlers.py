import app.keyboards as kb
import app.database.requests as rq


from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery, FSInputFile

router = Router()


#–Ω–∞—á–∞–ª–æ
@router.message(Command("start"))
async def cmd_start(message: types.Message) -> None:
    """
    This handler receives messages with `/start` command
    """
    if message.chat.type == "private":
        text = '–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à–∏ <a href="https://t.me/addlist/rlH9GFsdWsowZThi">—Ä–µ—Å—É—Ä—Å—ã</a>!'
        await message.answer(text, parse_mode="HTML",
                             disable_web_page_preview=True,
                             reply_markup=kb.settings)

#–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
@router.message(F.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å')
async def check_subscription(message: types.Message):
    chat_id_list = ["-1002234927815"]
    #–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å id –≥—Ä—É–ø–ø –∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–æ–≤/–ø–∞–±–ª–∏–∫–æ–≤
    status_channel_list = []

    for chat_id in chat_id_list:
        chat_member = await message.bot.get_chat_member(chat_id=chat_id, user_id=message.from_user.id)
        if chat_member.status != 'left':
            status_channel_list.append("+")
        else:
            status_channel_list.append("-")
    if "-" in status_channel_list:
        text = '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å <a href="https://t.me/addlist/rlH9GFsdWsowZThi">–ø–∞–ø–∫—É</a> —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏.'
        await message.answer(text, parse_mode="HTML",
                             disable_web_page_preview=True,
                             reply_markup=kb.settings
                             )
    else:
        await message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=kb.del_keyboard)
        text ="–õ–æ–≤–∏ –ø–æ–ª–µ–∑–Ω–µ–π—à–∏–π –≥–∞–π–¥ –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –Ω–æ–≤–æ–º —Ç—Ä–µ–Ω–¥–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ú–ï–ú–ï –ö–û–ò–ù–´!" \
                "–ú—ã —Å –∫–æ–º–∞–Ω–¥–æ–π —É–∂–µ —É–º–Ω–æ–∂–∏–ª–∏ —Å–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª –≤ 10, 20 –∏ –¥–∞–∂–µ 100 —Ä–∞–∑! –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö –≤—ã—à–µ!" \
                "–•–æ—á–µ—à—å —Ç–∞–∫-–∂–µ? –¢–æ–≥–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç–∏ \n<a href='https://t.me/KKrypty/1920'>–≠–¢–£ –°–¢–ê–¢–¨–Æ!</a>"
        await message.answer(text, parse_mode="HTML",
                             reply_markup=kb.next_art_2,
                             )

@router.callback_query(F.data == 'next-article-2')
async def next_article_2(callback: CallbackQuery):
    text = "–ù–µ —Ö–æ—á–µ—à—å –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –¥–µ–Ω—å–≥–∏ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª? –£ –Ω–∞—Å –µ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ç–µ–±—è! " \
        "–ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Å–µ–≥–æ 500 —Ä—É–±–ª–µ–π, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å! –õ–æ–≤–∏ –ø–æ–ª–µ–∑–Ω–µ–π—à–∏–π –≤–∏–¥–µ–æ-–≥–∞–π–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É!\n" \
        "<a href='https://t.me/KKrypty/1920'>—Å—Ç–∞—Ç—å—è –ø—Ä–æ –≤–∞—Ä–ø–∫–∞—Å—Ç</a>"
    await callback.message.answer(text, parse_mode="HTML",
                                  reply_markup=kb.next_art_3
                                  )

#–∑–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.callback_query(F.data == 'next-article-3')
async def next_article_3(callback: CallbackQuery):
    text = "–£ –Ω–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –¥–ª—è —Ç–µ–±—è –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ - —á—Ç–æ–±—ã –∏—Ö –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã.\n"
    await callback.message.answer(text, parse_mode="HTML",
                                  reply_markup=kb.req_contact
                                  )
#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(F.contact)
async def contact_callback(message: types.Message):
    await rq.set_tgid_and_number(message.from_user.id, int(message.contact.phone_number))
    await message.answer("–ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω", reply_markup=kb.del_keyboard)
    await message.answer(text="–°–ø–∞—Å–∏–±–æ, –≤–æ—Ç —Ç–≤–æ–π <a href='#'>–ø–æ–¥–∞—Ä–æ–∫</a>!", parse_mode="HTML",
                         reply_markup=kb.next_art_4)

#–ø—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞
@router.message(F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_send_number(message: types.Message):
    await message.answer(text="–í–≤–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω", reply_markup=kb.del_keyboard)
    text = "–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å —Ç—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤ –≤–∞–ø—Ä–∫–∞—Å—Ç–µ - —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π " \
            "–ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç - \n<a href='#'>–≤–∏–¥–µ–æ –ø—Ä–æ –≤–∞—Ä–ø–∫–∞—Å—Ç</a>"
    await message.answer(text, parse_mode="HTML",
                         reply_markup=kb.next_art_5)

@router.callback_query(F.data == 'next-article-4')
async def next_article_4(callback: CallbackQuery):
    text = "–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å —Ç—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤ –≤–∞–ø—Ä–∫–∞—Å—Ç–µ - —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π " \
           "–ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç - \n<a href='#'>–≤–∏–¥–µ–æ –ø—Ä–æ –≤–∞—Ä–ø–∫–∞—Å—Ç</a>"
    await callback.message.answer(text, parse_mode="HTML",
                                  reply_markup=kb.next_art_5)

@router.callback_query(F.data == 'next-article-5')
async def next_article_5(callback: CallbackQuery):
    text = "–ë—Ä–æ –¥–∞ —Ç—ã —É–∂–µ –ø–æ—á—Ç–∏ –ø—Ä–æ—Ñ–∏ –≤ –∫—Ä–∏–ø—Ç–µ. –õ–æ–≤–∏ –µ—â–µ –æ–¥–∏–Ω –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –Ω–∞—Å"
    await callback.message.answer(text, parse_mode="HTML")
    video = FSInputFile(path="app/animation/crypto-crypto.mp4")
    await callback.message.answer_video_note(video_note=video,
                                             reply_markup=kb.next_art_6)

@router.callback_query(F.data == 'next-article-6')
async def next_article_6(callback: CallbackQuery):
    text = "<a href='#'>—Å—Ç–∞—Ç—å—è</a>"
    await callback.message.answer(text, parse_mode="HTML",
                                  reply_markup=kb.next_art_7)

@router.callback_query(F.data == 'next-article-7')
async def next_article_7(callback: CallbackQuery):
    text = "–ù–∏ –¥–ª—è –∫–æ–≥–æ –Ω–µ —Å–µ–∫—Ä–µ—Ç, —á—Ç–æ –≥–ª–∞–≤–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–Ω–µ–≥ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω—Ñ–æ–ø–æ–ª–µ!\n" \
            "–ú—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –Ω–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –±–æ–ª–µ–µ 5000$!\n" \
            "–í—Å–µ–≥–æ –∑–∞ 29$! + –ë–û–ù–£–° –î–û–°–¢–£–ü –ö –ë–ò–ë–õ–ò–û–¢–ï–ö–ï –ó–ù–ê–ù–ò–ô –ü–û –í–°–ï–ô –ö–†–ò–ü–¢–ï –í –Ω—ë–º —Å–æ–±—Ä–∞–Ω—ã —Å–∞–º—ã–µ –ª—É—á—à–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –°–ù–ì!\n" \
            "–í–ª–∞–¥–µ—è —Ç–∞–∫–∏–º –∏–Ω—Ñ–æ–ø–æ–ª–µ–º –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–π!"
    await callback.message.answer(text, parse_mode="HTML",
                                  reply_markup=kb.next_art_8)

@router.callback_query(F.data == 'next-article-8')
async def next_article_8(callback: CallbackQuery):
    text = "–ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ –ª—é–¥–µ–π\n–ü–æ—á–µ–º—É —Ç—ã –µ—â–µ –Ω–µ —Å –Ω–∞–º–∏?\n" \
        "–ù–æ –≤–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å–∏–∫–∏.\n" \
        "–í—ã–±–µ—Ä–∏ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\n" \
        "\n" \
        "1. –°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –Ω—É–∂–Ω–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –≤ –∫—Ä–∏–ø—Ç–µ? - –ø–æ—Å—Ç\n" \
        "2. –ê –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ—Ç–∑—ã–≤—ã ? - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –æ—Ç–∑–æ–≤–∏–∫\n" \
        "3. –ü–æ–¥–æ–π–¥–µ—Ç –ª–∏ —ç—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –º–Ω–µ? - 1 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–µ–π—Å (–∫–æ—Ç–æ—Ä—ã–π –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –±–æ–ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –Ω–æ—Ä–º–∏—Å–æ = –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å —Å–µ–±—è –≤ —ç—Ç–æ–º –∫–µ–π—Å–µ)\n" \
        "\n" \
        "–ù–∞–∂–º–∏ –Ω–∞ —Ü–∏—Ñ—Ä—É –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ üëáüëá"
    await callback.message.answer(text, parse_mode="HTML",
                                  reply_markup=kb.choice_question)